{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,K,E,W,C,E,a,C,C,ECEO,OAAM,EAIX,aAAc,CACZ,IAAI,CAAC,SAAS,CAAG,SAAS,aAAa,CAAC,eACxC,IAAI,CAAC,aAAa,CAAG,SAAS,aAAa,CAAC,cAC9C,CAEA,oCAAoC,CAA8C,CAAQ,CACxF,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAS,KAC3C,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CACxB,EACF,CACF,C,G,E,Q,4D","sources":["<anon>","src/task-form.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire0d70\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire0d70\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"9BWqW\", function(module, exports) {\n\n$parcel$export(module.exports, \"TaskForm\", () => $1e30da132c7a6617$export$e50db97352586cdf);\nclass $1e30da132c7a6617$export$e50db97352586cdf {\n    constructor(){\n        this.taskInput = document.querySelector(\"#task-input\");\n        this.addTaskButton = document.querySelector(\"#add-button\");\n    }\n    registerAddTaskButtonClickEventFunc(f) {\n        this.addTaskButton.addEventListener(\"click\", ()=>{\n            f(this.taskInput.value);\n        });\n    }\n}\n\n});\n\n\nparcelRequire(\"9BWqW\");\n\n//# sourceMappingURL=index.db669c9a.js.map\n","type RegisterAddTaskButtonClickEventCallbackType = (inputValue: string) => void;\n\nexport class TaskForm {\n  private taskInput: HTMLInputElement;\n  private addTaskButton: HTMLButtonElement;\n\n  constructor() {\n    this.taskInput = document.querySelector('#task-input')!\n    this.addTaskButton = document.querySelector('#add-button')!\n  }\n\n  registerAddTaskButtonClickEventFunc(f: RegisterAddTaskButtonClickEventCallbackType): void {\n    this.addTaskButton.addEventListener('click', () => {\n      f(this.taskInput.value);\n    })\n  }\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$1e30da132c7a6617$export$e50db97352586cdf","set","s","enumerable","configurable","constructor","taskInput","document","querySelector","addTaskButton","registerAddTaskButtonClickEventFunc","f","addEventListener","value"],"version":3,"file":"index.db669c9a.js.map"}